[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "kartezio"
version = "1.1.0"
description = "Evolutionary design of explainable algorithms for biomedical image segmentation"
readme = "README.md"
license = {text = "Proprietary"}
authors = [
    {name = "Kevin Cortacero", email = "kevin.cortacero@protonmail.com"}
]
maintainers = [
    {name = "Kevin Cortacero", email = "kevin.cortacero@protonmail.com"}
]
keywords = [
    "computer-vision", 
    "evolutionary-computation", 
    "genetic-programming", 
    "image-segmentation", 
    "biomedical-imaging",
    "explainable-ai"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
]
requires-python = ">=3.11"
dependencies = [
    # Core numerical computing
    "numpy>=1.24.0",
    
    # Data manipulation and analysis
    "pandas>=1.5.0",
    
    # Image processing and computer vision
    "scikit-image>=0.20.0",
    "opencv-python>=4.7.0",
    
    # Scientific computing
    "scipy>=1.10.0",  # Missing dependency - used in scalar.py
    
    # Machine learning acceleration
    "numba>=0.57.0",
    
    # Visualization
    "matplotlib>=3.6.0",
    
    # Specialized file formats
    "czifile>=2019.7.2",
    "roifile>=2020.5.28",
    
    # Output formatting
    "tabulate>=0.9.0",
    
    # Image processing for visualization
    "Pillow>=9.0.0",  # Missing dependency - used in viewer.py
    
    # Graph visualization - networkx is required, pygraphviz is optional
    "networkx>=2.8.0",  # Missing dependency - used in viewer.py
    
    # Environmental impact tracking
    "codecarbon>=2.8.3",
]

[project.optional-dependencies]
# Visualization dependencies (heavy, optional)
viz = [
    "pygraphviz>=1.10.0",  # Requires system graphviz libraries
]

# Development dependencies
dev = [
    # Code formatting and linting
    "ruff>=0.6.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    
    # Type checking
    "mypy>=1.5.0",
    "types-tabulate",
    "types-Pillow",
    
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",  # Parallel testing
    "coverage[toml]>=7.3.0",
    
    # Documentation
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",  # Markdown support in Sphinx
    
    # Build and packaging
    "build>=0.10.0",
    "twine>=4.0.2",
    "wheel>=0.41.0",
    
    # Development utilities
    "pre-commit>=3.4.0",
    "tox>=4.11.0",
    "pip-tools>=7.3.0",
]

# Testing dependencies (subset of dev)
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "coverage[toml]>=7.3.0",
]

# Documentation dependencies
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "matplotlib>=3.6.0",  # For plot examples in docs
]

[project.urls]
Homepage = "https://kartezio.com"
Documentation = "https://kartezio.readthedocs.io"
Repository = "https://github.com/KevinCortacero/Kartezio"
"Bug Tracker" = "https://github.com/KevinCortacero/Kartezio/issues"
Changelog = "https://github.com/KevinCortacero/Kartezio/blob/main/CHANGELOG.md"

[project.scripts]
kartezio = "kartezio.cli:main"

# Hatch configuration for building
[tool.hatch.build.targets.sdist]
include = [
    "src/kartezio",
    "README.md",
    "LICENSE",
    "CLAUDE.md",
]

[tool.hatch.build.targets.wheel]
packages = ["src/kartezio"]

[tool.hatch.build.targets.wheel.sources]
"src/kartezio" = "kartezio"

# Ruff configuration (replaces flake8, isort, and many other tools)
[tool.ruff]
target-version = "py311"
line-length = 79
respect-gitignore = true

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate
    "PL",     # Pylint
    "RUF",    # Ruff-specific rules
]
ignore = [
    "PLR0913",  # Too many arguments to function call
    "PLR0912",  # Too many branches
    "PLR0915",  # Too many statements
    "E501",     # Line too long (handled by formatter)
    "B008",     # Do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**/*.py" = [
    "ARG001",   # Unused function argument
    "ARG002",   # Unused method argument  
    "S101",     # Use of assert
]

[tool.ruff.lint.isort]
known-first-party = ["kartezio"]
force-sort-within-sections = true

# Black configuration
[tool.black]
line-length = 79
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration (as fallback, but ruff handles it now)
[tool.isort]
profile = "black"
line_length = 79
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["kartezio"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Enable gradually
disallow_incomplete_defs = false  # Enable gradually
check_untyped_defs = true
disallow_untyped_decorators = false  # Enable gradually
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "roifile.*", 
    "czifile.*",
    "skimage.*",
    "scipy.*",
    "numba.*",
    "pygraphviz.*",
    "codecarbon.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=kartezio",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests as security-related tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

# Tool-specific configurations for development
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection warnings in dev

[tool.vulture]
exclude = ["tests/", "build/", "dist/"]
ignore_decorators = ["@register", "@fundamental"]
ignore_names = ["_*"]
min_confidence = 60